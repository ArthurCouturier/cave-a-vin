"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const request_1 = require("../shared/request");
async function openSession(sessionStart, axiosInstance) {
    // SessionStart's Password build
    if (sessionStart.password &&
        typeof sessionStart.password === "object" &&
        typeof sessionStart.password.app_token === "string" &&
        typeof sessionStart.password.challenge === "string") {
        const app_token = sessionStart.password.app_token;
        const challenge = sessionStart.password.challenge;
        sessionStart.password = crypto_1.createHmac("sha1", app_token)
            .update(challenge)
            .digest("hex");
    }
    const requestConfig = {
        method: "post",
        url: "login/session/",
        data: sessionStart
    };
    const response = await request_1.default(requestConfig, axiosInstance);
    return response;
}
exports.openSession = openSession;
async function getChallenge(axiosInstance) {
    const requestConfig = {
        method: "get",
        url: "login/"
    };
    const response = await request_1.default(requestConfig, axiosInstance);
    return response;
}
exports.getChallenge = getChallenge;
async function requestAuthorization(appConfig, axiosInstance) {
    const requestConfig = {
        method: "post",
        url: "login/authorize/",
        data: appConfig
    };
    const response = await request_1.default(requestConfig, axiosInstance);
    return response;
}
exports.requestAuthorization = requestAuthorization;
async function trackAuthorizationProgress(track_id, axiosInstance) {
    if (!track_id)
        throw new Error("Missing argument: track_id");
    const requestConfig = {
        method: "get",
        url: `login/authorize/${track_id}`
    };
    const response = await request_1.default(requestConfig, axiosInstance);
    return response;
}
exports.trackAuthorizationProgress = trackAuthorizationProgress;
//# sourceMappingURL=login.js.map