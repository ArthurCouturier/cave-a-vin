import { AxiosRequestConfig, AxiosResponse } from "axios";
import { Session } from "../apis/login";
import { Discovery } from "../apis/discovery";
interface App {
    app_id: string;
    app_name: string;
    app_version?: string;
    device_name: string;
    app_token?: string;
}
interface FreeboxConfig {
    app: App;
    discovery: Discovery;
}
export interface FbxResponse extends AxiosResponse {
    data: {
        success: boolean;
        result: Object | Array<Object>;
        error_code?: string;
        uid?: string;
        msg?: string;
    };
}
interface IFreeboxOptions {
    config?: FreeboxConfig | string;
    baseURL?: string;
}
export interface IFreebox {
    login(): Promise<Session>;
    request(requestConfig: AxiosRequestConfig): Promise<AxiosResponse>;
    logout(): Promise<boolean>;
    register(appConfig: App): Promise<string>;
}
export default class Freebox implements IFreebox {
    readonly localURL: string;
    readonly configRootPath: string;
    readonly authorizationStatus: {
        [index: string]: string;
    };
    readonly authentificationErrors: {
        [index: string]: string;
    };
    private baseURL;
    private axiosIsInitialized;
    private axios;
    private configMethod;
    session?: Session;
    configPath?: string;
    config?: FreeboxConfig;
    constructor(options?: IFreeboxOptions);
    private initialize;
    login(): Promise<Session>;
    request(requestConfig: AxiosRequestConfig): Promise<AxiosResponse>;
    logout(): Promise<boolean>;
    register(appConfig: App): Promise<string>;
    private getAuthorizationStatus;
    private setAxios;
    private getConfigFromConfigFile;
    private updateConfigFile;
}
export {};
