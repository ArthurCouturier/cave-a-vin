"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const https_1 = require("https");
const axios_1 = require("axios");
const appRoot = require("app-root-path");
const utils_1 = require("./utils");
const freeboxRootCA_1 = require("./https/freeboxRootCA");
const login_1 = require("../apis/login");
const discovery_1 = require("../apis/discovery");
class Freebox {
    constructor(options = {}) {
        this.localURL = utils_1.localURL;
        this.configRootPath = `${appRoot}/freebox.config.json`;
        this.authorizationStatus = {
            unknown: "the app_token is invalid or has been revoked",
            pending: "the user has not confirmed the authorization request yet",
            timeout: "the user did not confirmed the authorization within the given time",
            granted: "the app_token is valid and can be used to open a session",
            denied: "the user denied the authorization request"
        };
        this.authentificationErrors = {
            auth_required: "Invalid session token, or not session token sent",
            invalid_token: "The app token you are trying to use is invalid or has been revoked",
            pending_token: "The app token you are trying to use has not been validated by user yet",
            insufficient_rights: "Your app permissions does not allow accessing this API",
            denied_from_external_ip: "You are trying to get an app_token from a remote IP",
            invalid_request: "Your request is invalid",
            ratelimited: "Too many auth error have been made from your IP",
            new_apps_denied: "New application token request has been disabled",
            apps_denied: "API access from apps has been disabled",
            internal_error: "Internal error"
        };
        this.baseURL = this.localURL;
        this.axiosIsInitialized = false;
        this.axios = axios_1.default.create();
        const { config, baseURL } = options;
        if (typeof config === "object") {
            if (!config.app) {
                throw new Error('Missing "app" part in your configuration object.');
            }
            this.config = config;
            this.baseURL = baseURL || this.localURL;
            this.configMethod = "json";
        }
        else if (typeof config === "string") {
            this.configPath = config;
            this.configMethod = "path";
        }
        else {
            // Default: use root path
            this.configPath = this.configRootPath;
            this.configMethod = "path"; //rootPath
        }
    }
    async initialize() {
        // Set this.config for config file case
        if (this.configMethod === "path" && !this.config) {
            this.config = await this.getConfigFromConfigFile();
        }
        // Set Axios instance to prepare following requests
        if (!this.axiosIsInitialized) {
            await this.setAxios();
        }
    }
    async login() {
        await this.initialize();
        if (!this.config) {
            throw new Error("Missing Freebox Configuration");
        }
        // Set discovery
        const hasAPIDomain = this.config.discovery &&
            this.config.discovery.api_domain &&
            typeof this.config.discovery.api_domain === "string";
        const hasHTTPSPort = this.config.discovery &&
            this.config.discovery.https_port &&
            typeof this.config.discovery.https_port === "number";
        const hasDiscovery = hasAPIDomain && hasHTTPSPort;
        if (!hasDiscovery) {
            if (this.configMethod === "path") {
                utils_1.log.warn("Missing 'discovery' part in your Freebox Config file.");
            }
            else if (this.configMethod === "json") {
                utils_1.log.warn("Missing 'discovery' part in your Freebox Config.");
            }
            const res = await discovery_1.discovery(this.axios);
            const discoveryData = res.data;
            if (!discoveryData.https_available) {
                throw new Error("HTTPS is not available in your Freebox Server.");
            }
            this.config.discovery = discoveryData;
            if (this.configMethod === "path") {
                await this.updateConfigFile();
                utils_1.log.success("Freebox Config file updated with success: 'discovery' part updated.");
            }
            else if (this.configMethod === "json") {
                utils_1.log.info(`Please update your configuration object with the following for next connections: \n ${JSON.stringify(this.config, null, 2)}`);
            }
            // Update Axios config to update discovery part
            await this.setAxios();
        }
        // Register application to get app_token
        const hasAppToken = this.config.app &&
            this.config.app.app_token &&
            typeof this.config.app.app_token === "string";
        if (!hasAppToken) {
            if (this.configMethod === "path") {
                utils_1.log.warn("Missing app_token in your Freebox Config file.");
            }
            else if (this.configMethod === "json") {
                utils_1.log.warn("Missing app_token in your Freebox Config.");
            }
            utils_1.log.info("Please check your Freebox Server screen and authorize application access to get your app_token.");
            try {
                this.config.app.app_token = await this.register(this.config.app);
                utils_1.log.success("New Freebox application registered with success !");
            }
            catch (err) {
                utils_1.log.error("Failed to register your application to get your application token.");
                throw err;
            }
            if (this.configMethod === "json") {
                utils_1.log.warn(`Please update your configuration object with the following for next connections: \n ${JSON.stringify(this.config, null, 2)}`);
            }
            else if (this.configMethod === "path") {
                await this.updateConfigFile();
                utils_1.log.success("Freebox Config file updated with success: app_token added.");
            }
            else {
                throw new Error("Cannot log or set app_token to your Freebox configuration.");
            }
        }
        // Session configuration
        const challengeRes = await login_1.getChallenge(this.axios);
        const { challenge, logged_in } = challengeRes.data.result;
        const sessionStart = {
            app_id: this.config.app.app_id,
            app_version: this.config.app.app_version || "",
            password: { app_token: this.config.app.app_token || "", challenge }
        };
        // Session opening
        const openSessionRes = await login_1.openSession(sessionStart, this.axios);
        const { session_token, permissions } = openSessionRes.data.result;
        // Set Session
        this.session = {};
        this.session.session_token = session_token;
        this.session.permissions = permissions;
        // Update Axios Instance
        await this.setAxios();
        return this.session;
    }
    async request(requestConfig) {
        await this.initialize();
        try {
            const response = await this.axios(requestConfig);
            return response;
        }
        catch (err) {
            if (err.response.status === 403) {
                const fbxErrorCode = err.response.data.error_code;
                const fbxErrorDescription = this.authentificationErrors[fbxErrorCode];
                if (fbxErrorDescription) {
                    throw new Error(`${fbxErrorDescription} : \n ${JSON.stringify(err.response.data, null, 2)}`);
                }
            }
            throw new Error(err);
        }
    }
    async logout() {
        await this.initialize();
        // Reset Session
        this.session = {};
        const response = await this.request({
            method: "post",
            url: "/api/v4/login/logout/"
        });
        return response.data.success;
    }
    async register(appConfig) {
        await this.initialize();
        const res = await login_1.requestAuthorization(appConfig, this.axios);
        const { app_token, track_id } = res.data.result;
        await this.getAuthorizationStatus(track_id);
        return app_token;
    }
    getAuthorizationStatus(track_id) {
        return new Promise(async (resolve, reject) => {
            const self = this;
            async function checkTrackAuthorizationProgress() {
                try {
                    const response = await login_1.trackAuthorizationProgress(track_id, self.axios);
                    const { status } = response.data.result;
                    if (status === "pending") {
                        return true;
                    }
                    else if (status === "granted") {
                        clearInterval(intervalTrackAuthorizationProgress);
                        resolve(true);
                    }
                    else {
                        clearInterval(intervalTrackAuthorizationProgress);
                        const endStatus = response.data.result.status;
                        const errData = response.data;
                        reject(`${self.authorizationStatus[endStatus]}: \n ${JSON.stringify(errData, null, 2)}`);
                    }
                }
                catch (err) {
                    clearInterval(intervalTrackAuthorizationProgress);
                    reject(err);
                }
            }
            const intervalTrackAuthorizationProgress = setInterval(await checkTrackAuthorizationProgress, 2 * 1000);
        });
    }
    async setAxios() {
        const instanceConfig = {
            baseURL: this.baseURL,
            headers: {}
        };
        // Set Freebox Session header
        if (this.session && this.session.session_token) {
            instanceConfig.headers["X-Fbx-App-Auth"] = this.session.session_token;
        }
        // Secure HTTPS configuration
        // https://engineering.circle.com/https-authorized-certs-with-node-js-315e548354a2
        if (this.config && this.config.discovery) {
            instanceConfig.httpsAgent = new https_1.Agent({
                ca: freeboxRootCA_1.default
            });
            instanceConfig.baseURL = `https://${this.config.discovery.api_domain}:${this.config.discovery.https_port}${this.config.discovery.api_base_url}v${this.config.discovery.api_version.slice(0, 1).trim()}`;
        }
        this.axios = axios_1.default.create(instanceConfig);
        this.axiosIsInitialized = true;
        return this.axios;
    }
    async getConfigFromConfigFile() {
        if (!this.configPath) {
            throw new Error("Cannot update Freebox configuration file: no config path specified.");
        }
        const fileData = await utils_1.readFile(this.configPath);
        const config = JSON.parse(String(fileData));
        return config;
    }
    async updateConfigFile() {
        if (!this.configPath) {
            throw new Error("Cannot update Freebox configuration file: no config path specified.");
        }
        const fileDataUpdated = JSON.stringify(this.config, null, 2);
        await utils_1.writeFile(this.configPath, fileDataUpdated);
    }
}
exports.default = Freebox;
//# sourceMappingURL=Freebox.js.map